%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.11.0
-module(message).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_GenericMessage.MessageType'/1, 'enum_value_by_symbol_GenericMessage.MessageType'/1]).
-export([enum_symbol_by_value_ClientType/1, enum_value_by_symbol_ClientType/1]).
-export([enum_symbol_by_value_AuthenticationRequestType/1, enum_value_by_symbol_AuthenticationRequestType/1]).
-export([enum_symbol_by_value_Area/1, enum_value_by_symbol_Area/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("message.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'GenericMessage.MessageType'() :: 'ADD_ARTIGO' | 'ADD_ENCOMENDA' | 'AUTH_REQUEST'.
-type 'ClientType'() :: 'IMPORTER' | 'MANUFACTURER'.
-type 'AuthenticationRequestType'() :: 'REGISTER' | 'LOGIN'.
-type 'Area'() :: 'TECNOLOGIA' | 'ALIMENTACAO' | 'TEXTEIS' | 'DIVERSOS'.
-export_type(['GenericMessage.MessageType'/0, 'ClientType'/0, 'AuthenticationRequestType'/0, 'Area'/0]).

%% message types
-type 'GenericMessage'() :: #'GenericMessage'{}.

-type 'AddArtigoMessage'() :: #'AddArtigoMessage'{}.

-type 'AddEncomendaMessage'() :: #'AddEncomendaMessage'{}.

-type 'AuthenticationRequest'() :: #'AuthenticationRequest'{}.

-export_type(['GenericMessage'/0, 'AddArtigoMessage'/0, 'AddEncomendaMessage'/0, 'AuthenticationRequest'/0]).

-spec encode_msg(#'GenericMessage'{} | #'AddArtigoMessage'{} | #'AddEncomendaMessage'{} | #'AuthenticationRequest'{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#'GenericMessage'{} | #'AddArtigoMessage'{} | #'AddEncomendaMessage'{} | #'AuthenticationRequest'{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#'GenericMessage'{} | #'AddArtigoMessage'{} | #'AddEncomendaMessage'{} | #'AuthenticationRequest'{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'GenericMessage' ->
	  encode_msg_GenericMessage(id(Msg, TrUserData),
				    TrUserData);
      'AddArtigoMessage' ->
	  encode_msg_AddArtigoMessage(id(Msg, TrUserData),
				      TrUserData);
      'AddEncomendaMessage' ->
	  encode_msg_AddEncomendaMessage(id(Msg, TrUserData),
					 TrUserData);
      'AuthenticationRequest' ->
	  encode_msg_AuthenticationRequest(id(Msg, TrUserData),
					   TrUserData)
    end.


encode_msg_GenericMessage(Msg, TrUserData) ->
    encode_msg_GenericMessage(Msg, <<>>, TrUserData).


encode_msg_GenericMessage(#'GenericMessage'{type = F1,
					    payload = F2},
			  Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   'e_enum_GenericMessage.MessageType'(TrF1,
					       <<Bin/binary, 8>>, TrUserData)
	 end,
    if F2 =:= undefined -> B1;
       true ->
	   case id(F2, TrUserData) of
	     {artigo, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   e_mfield_GenericMessage_artigo(TrTF2, <<B1/binary, 18>>,
						  TrUserData)
		 end;
	     {encomenda, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   e_mfield_GenericMessage_encomenda(TrTF2,
						     <<B1/binary, 26>>,
						     TrUserData)
		 end;
	     {auth_request, TF2} ->
		 begin
		   TrTF2 = id(TF2, TrUserData),
		   e_mfield_GenericMessage_auth_request(TrTF2,
							<<B1/binary, 34>>,
							TrUserData)
		 end
	   end
    end.

encode_msg_AddArtigoMessage(Msg, TrUserData) ->
    encode_msg_AddArtigoMessage(Msg, <<>>, TrUserData).


encode_msg_AddArtigoMessage(#'AddArtigoMessage'{manufacturer_name
						    = F1,
						product_name = F2,
						minimum_quantity = F3,
						maximum_quantity = F4,
						unitary_price = F5,
						negotiation_time = F6},
			    Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    B5 = begin
	   TrF5 = id(F5, TrUserData),
	   e_type_int32(TrF5, <<B4/binary, 40>>, TrUserData)
	 end,
    begin
      TrF6 = id(F6, TrUserData),
      e_type_int32(TrF6, <<B5/binary, 48>>, TrUserData)
    end.

encode_msg_AddEncomendaMessage(Msg, TrUserData) ->
    encode_msg_AddEncomendaMessage(Msg, <<>>, TrUserData).


encode_msg_AddEncomendaMessage(#'AddEncomendaMessage'{importer_name
							  = F1,
						      manufacturer = F2,
						      product = F3,
						      quantity = F4,
						      willing_price = F5},
			       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_int32(TrF4, <<B3/binary, 32>>, TrUserData)
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      e_type_int32(TrF5, <<B4/binary, 40>>, TrUserData)
    end.

encode_msg_AuthenticationRequest(Msg, TrUserData) ->
    encode_msg_AuthenticationRequest(Msg, <<>>, TrUserData).


encode_msg_AuthenticationRequest(#'AuthenticationRequest'{authType
							      = F1,
							  clientType = F2,
							  area = F3,
							  username = F4,
							  password = F5},
				 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_enum_AuthenticationRequestType(TrF1,
					    <<Bin/binary, 8>>, TrUserData)
	 end,
    B2 = begin
	   TrF2 = id(F2, TrUserData),
	   e_enum_ClientType(TrF2, <<B1/binary, 16>>, TrUserData)
	 end,
    B3 = begin
	   TrF3 = id(F3, TrUserData),
	   e_enum_Area(TrF3, <<B2/binary, 24>>, TrUserData)
	 end,
    B4 = begin
	   TrF4 = id(F4, TrUserData),
	   e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
	 end,
    begin
      TrF5 = id(F5, TrUserData),
      e_type_string(TrF5, <<B4/binary, 42>>, TrUserData)
    end.

e_mfield_GenericMessage_artigo(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_AddArtigoMessage(Msg, <<>>,
					 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_GenericMessage_encomenda(Msg, Bin,
				  TrUserData) ->
    SubBin = encode_msg_AddEncomendaMessage(Msg, <<>>,
					    TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_GenericMessage_auth_request(Msg, Bin,
				     TrUserData) ->
    SubBin = encode_msg_AuthenticationRequest(Msg, <<>>,
					      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_enum_GenericMessage.MessageType'('ADD_ARTIGO', Bin,
				    _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_GenericMessage.MessageType'('ADD_ENCOMENDA',
				    Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_GenericMessage.MessageType'('AUTH_REQUEST', Bin,
				    _TrUserData) ->
    <<Bin/binary, 3>>;
'e_enum_GenericMessage.MessageType'(V, Bin,
				    _TrUserData) ->
    e_varint(V, Bin).

e_enum_ClientType('IMPORTER', Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_enum_ClientType('MANUFACTURER', Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
e_enum_ClientType(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

e_enum_AuthenticationRequestType('REGISTER', Bin,
				 _TrUserData) ->
    <<Bin/binary, 1>>;
e_enum_AuthenticationRequestType('LOGIN', Bin,
				 _TrUserData) ->
    <<Bin/binary, 2>>;
e_enum_AuthenticationRequestType(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

e_enum_Area('TECNOLOGIA', Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_enum_Area('ALIMENTACAO', Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
e_enum_Area('TEXTEIS', Bin, _TrUserData) ->
    <<Bin/binary, 3>>;
e_enum_Area('DIVERSOS', Bin, _TrUserData) ->
    <<Bin/binary, 4>>;
e_enum_Area(V, Bin, _TrUserData) -> e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('GenericMessage', Bin, TrUserData) ->
    id(decode_msg_GenericMessage(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('AddArtigoMessage', Bin,
		  TrUserData) ->
    id(decode_msg_AddArtigoMessage(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('AddEncomendaMessage', Bin,
		  TrUserData) ->
    id(decode_msg_AddEncomendaMessage(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('AuthenticationRequest', Bin,
		  TrUserData) ->
    id(decode_msg_AuthenticationRequest(Bin, TrUserData),
       TrUserData).



decode_msg_GenericMessage(Bin, TrUserData) ->
    dfp_read_field_def_GenericMessage(Bin, 0, 0,
				      id(undefined, TrUserData),
				      id(undefined, TrUserData), TrUserData).

dfp_read_field_def_GenericMessage(<<8, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_GenericMessage_type(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
dfp_read_field_def_GenericMessage(<<18, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_GenericMessage_artigo(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
dfp_read_field_def_GenericMessage(<<26, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_GenericMessage_encomenda(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
dfp_read_field_def_GenericMessage(<<34, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_GenericMessage_auth_request(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData);
dfp_read_field_def_GenericMessage(<<>>, 0, 0, F@_1,
				  F@_2, _) ->
    #'GenericMessage'{type = F@_1, payload = F@_2};
dfp_read_field_def_GenericMessage(Other, Z1, Z2, F@_1,
				  F@_2, TrUserData) ->
    dg_read_field_def_GenericMessage(Other, Z1, Z2, F@_1,
				     F@_2, TrUserData).

dg_read_field_def_GenericMessage(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GenericMessage(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_GenericMessage(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_GenericMessage_type(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
      18 ->
	  d_field_GenericMessage_artigo(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
      26 ->
	  d_field_GenericMessage_encomenda(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      34 ->
	  d_field_GenericMessage_auth_request(Rest, 0, 0, F@_1,
					      F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GenericMessage(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    1 ->
		skip_64_GenericMessage(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
	    2 ->
		skip_length_delimited_GenericMessage(Rest, 0, 0, F@_1,
						     F@_2, TrUserData);
	    3 ->
		skip_group_GenericMessage(Rest, Key bsr 3, 0, F@_1,
					  F@_2, TrUserData);
	    5 ->
		skip_32_GenericMessage(Rest, 0, 0, F@_1, F@_2,
				       TrUserData)
	  end
    end;
dg_read_field_def_GenericMessage(<<>>, 0, 0, F@_1, F@_2,
				 _) ->
    #'GenericMessage'{type = F@_1, payload = F@_2}.

d_field_GenericMessage_type(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_GenericMessage_type(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
d_field_GenericMessage_type(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_GenericMessage.MessageType'(begin
						  <<Res:32/signed-native>> =
						      <<(X bsl N +
							   Acc):32/unsigned-native>>,
						  id(Res, TrUserData)
						end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_GenericMessage(RestF, 0, 0,
				      NewFValue, F@_2, TrUserData).

d_field_GenericMessage_artigo(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_GenericMessage_artigo(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_GenericMessage_artigo(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_AddArtigoMessage(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_GenericMessage(RestF, 0, 0, F@_1,
				      case Prev of
					undefined ->
					    id({artigo, NewFValue}, TrUserData);
					{artigo, MVPrev} ->
					    id({artigo,
						merge_msg_AddArtigoMessage(MVPrev,
									   NewFValue,
									   TrUserData)},
					       TrUserData);
					_ -> id({artigo, NewFValue}, TrUserData)
				      end,
				      TrUserData).

d_field_GenericMessage_encomenda(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_GenericMessage_encomenda(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_GenericMessage_encomenda(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_AddEncomendaMessage(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_GenericMessage(RestF, 0, 0, F@_1,
				      case Prev of
					undefined ->
					    id({encomenda, NewFValue},
					       TrUserData);
					{encomenda, MVPrev} ->
					    id({encomenda,
						merge_msg_AddEncomendaMessage(MVPrev,
									      NewFValue,
									      TrUserData)},
					       TrUserData);
					_ ->
					    id({encomenda, NewFValue},
					       TrUserData)
				      end,
				      TrUserData).

d_field_GenericMessage_auth_request(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_GenericMessage_auth_request(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_GenericMessage_auth_request(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_AuthenticationRequest(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_GenericMessage(RestF, 0, 0, F@_1,
				      case Prev of
					undefined ->
					    id({auth_request, NewFValue},
					       TrUserData);
					{auth_request, MVPrev} ->
					    id({auth_request,
						merge_msg_AuthenticationRequest(MVPrev,
										NewFValue,
										TrUserData)},
					       TrUserData);
					_ ->
					    id({auth_request, NewFValue},
					       TrUserData)
				      end,
				      TrUserData).

skip_varint_GenericMessage(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_GenericMessage(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
skip_varint_GenericMessage(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_GenericMessage(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

skip_length_delimited_GenericMessage(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_GenericMessage(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_GenericMessage(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GenericMessage(Rest2, 0, 0, F@_1,
				      F@_2, TrUserData).

skip_group_GenericMessage(Bin, FNum, Z2, F@_1, F@_2,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GenericMessage(Rest, 0, Z2, F@_1,
				      F@_2, TrUserData).

skip_32_GenericMessage(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_GenericMessage(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

skip_64_GenericMessage(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_GenericMessage(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

decode_msg_AddArtigoMessage(Bin, TrUserData) ->
    dfp_read_field_def_AddArtigoMessage(Bin, 0, 0,
					id(undefined, TrUserData),
					id(undefined, TrUserData),
					id(undefined, TrUserData),
					id(undefined, TrUserData),
					id(undefined, TrUserData),
					id(undefined, TrUserData), TrUserData).

dfp_read_field_def_AddArtigoMessage(<<10, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    TrUserData) ->
    d_field_AddArtigoMessage_manufacturer_name(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, TrUserData);
dfp_read_field_def_AddArtigoMessage(<<18, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    TrUserData) ->
    d_field_AddArtigoMessage_product_name(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					  TrUserData);
dfp_read_field_def_AddArtigoMessage(<<24, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    TrUserData) ->
    d_field_AddArtigoMessage_minimum_quantity(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, TrUserData);
dfp_read_field_def_AddArtigoMessage(<<32, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    TrUserData) ->
    d_field_AddArtigoMessage_maximum_quantity(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, TrUserData);
dfp_read_field_def_AddArtigoMessage(<<40, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    TrUserData) ->
    d_field_AddArtigoMessage_unitary_price(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					   TrUserData);
dfp_read_field_def_AddArtigoMessage(<<48, Rest/binary>>,
				    Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    TrUserData) ->
    d_field_AddArtigoMessage_negotiation_time(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, TrUserData);
dfp_read_field_def_AddArtigoMessage(<<>>, 0, 0, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, _) ->
    #'AddArtigoMessage'{manufacturer_name = F@_1,
			product_name = F@_2, minimum_quantity = F@_3,
			maximum_quantity = F@_4, unitary_price = F@_5,
			negotiation_time = F@_6};
dfp_read_field_def_AddArtigoMessage(Other, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dg_read_field_def_AddArtigoMessage(Other, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6,
				       TrUserData).

dg_read_field_def_AddArtigoMessage(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AddArtigoMessage(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, TrUserData);
dg_read_field_def_AddArtigoMessage(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AddArtigoMessage_manufacturer_name(Rest, 0, 0,
						     F@_1, F@_2, F@_3, F@_4,
						     F@_5, F@_6, TrUserData);
      18 ->
	  d_field_AddArtigoMessage_product_name(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, F@_5, F@_6,
						TrUserData);
      24 ->
	  d_field_AddArtigoMessage_minimum_quantity(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, F@_6, TrUserData);
      32 ->
	  d_field_AddArtigoMessage_maximum_quantity(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, F@_6, TrUserData);
      40 ->
	  d_field_AddArtigoMessage_unitary_price(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, F@_5, F@_6,
						 TrUserData);
      48 ->
	  d_field_AddArtigoMessage_negotiation_time(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, F@_6, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AddArtigoMessage(Rest, 0, 0, F@_1, F@_2,
					     F@_3, F@_4, F@_5, F@_6,
					     TrUserData);
	    1 ->
		skip_64_AddArtigoMessage(Rest, 0, 0, F@_1, F@_2, F@_3,
					 F@_4, F@_5, F@_6, TrUserData);
	    2 ->
		skip_length_delimited_AddArtigoMessage(Rest, 0, 0, F@_1,
						       F@_2, F@_3, F@_4, F@_5,
						       F@_6, TrUserData);
	    3 ->
		skip_group_AddArtigoMessage(Rest, Key bsr 3, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, F@_6,
					    TrUserData);
	    5 ->
		skip_32_AddArtigoMessage(Rest, 0, 0, F@_1, F@_2, F@_3,
					 F@_4, F@_5, F@_6, TrUserData)
	  end
    end;
dg_read_field_def_AddArtigoMessage(<<>>, 0, 0, F@_1,
				   F@_2, F@_3, F@_4, F@_5, F@_6, _) ->
    #'AddArtigoMessage'{manufacturer_name = F@_1,
			product_name = F@_2, minimum_quantity = F@_3,
			maximum_quantity = F@_4, unitary_price = F@_5,
			negotiation_time = F@_6}.

d_field_AddArtigoMessage_manufacturer_name(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, TrUserData)
    when N < 57 ->
    d_field_AddArtigoMessage_manufacturer_name(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, F@_5, F@_6, TrUserData);
d_field_AddArtigoMessage_manufacturer_name(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, _, F@_2, F@_3, F@_4, F@_5,
					   F@_6, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AddArtigoMessage(RestF, 0, 0,
					NewFValue, F@_2, F@_3, F@_4, F@_5, F@_6,
					TrUserData).

d_field_AddArtigoMessage_product_name(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      F@_6, TrUserData)
    when N < 57 ->
    d_field_AddArtigoMessage_product_name(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  F@_5, F@_6, TrUserData);
d_field_AddArtigoMessage_product_name(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6,
				      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AddArtigoMessage(RestF, 0, 0, F@_1,
					NewFValue, F@_3, F@_4, F@_5, F@_6,
					TrUserData).

d_field_AddArtigoMessage_minimum_quantity(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, TrUserData)
    when N < 57 ->
    d_field_AddArtigoMessage_minimum_quantity(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, F@_6, TrUserData);
d_field_AddArtigoMessage_minimum_quantity(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, _, F@_4, F@_5,
					  F@_6, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_AddArtigoMessage(RestF, 0, 0, F@_1,
					F@_2, NewFValue, F@_4, F@_5, F@_6,
					TrUserData).

d_field_AddArtigoMessage_maximum_quantity(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, TrUserData)
    when N < 57 ->
    d_field_AddArtigoMessage_maximum_quantity(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, F@_6, TrUserData);
d_field_AddArtigoMessage_maximum_quantity(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, _, F@_5,
					  F@_6, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_AddArtigoMessage(RestF, 0, 0, F@_1,
					F@_2, F@_3, NewFValue, F@_5, F@_6,
					TrUserData).

d_field_AddArtigoMessage_unitary_price(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, TrUserData)
    when N < 57 ->
    d_field_AddArtigoMessage_unitary_price(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, TrUserData);
d_field_AddArtigoMessage_unitary_price(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6,
				       TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_AddArtigoMessage(RestF, 0, 0, F@_1,
					F@_2, F@_3, F@_4, NewFValue, F@_6,
					TrUserData).

d_field_AddArtigoMessage_negotiation_time(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, TrUserData)
    when N < 57 ->
    d_field_AddArtigoMessage_negotiation_time(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, F@_6, TrUserData);
d_field_AddArtigoMessage_negotiation_time(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_AddArtigoMessage(RestF, 0, 0, F@_1,
					F@_2, F@_3, F@_4, F@_5, NewFValue,
					TrUserData).

skip_varint_AddArtigoMessage(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			     TrUserData) ->
    skip_varint_AddArtigoMessage(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, F@_4, F@_5, F@_6, TrUserData);
skip_varint_AddArtigoMessage(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
			     TrUserData) ->
    dfp_read_field_def_AddArtigoMessage(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6,
					TrUserData).

skip_length_delimited_AddArtigoMessage(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, TrUserData)
    when N < 57 ->
    skip_length_delimited_AddArtigoMessage(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, TrUserData);
skip_length_delimited_AddArtigoMessage(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       F@_6, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AddArtigoMessage(Rest2, 0, 0, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6,
					TrUserData).

skip_group_AddArtigoMessage(Bin, FNum, Z2, F@_1, F@_2,
			    F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AddArtigoMessage(Rest, 0, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6,
					TrUserData).

skip_32_AddArtigoMessage(<<_:32, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_AddArtigoMessage(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6,
					TrUserData).

skip_64_AddArtigoMessage(<<_:64, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, TrUserData) ->
    dfp_read_field_def_AddArtigoMessage(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6,
					TrUserData).

decode_msg_AddEncomendaMessage(Bin, TrUserData) ->
    dfp_read_field_def_AddEncomendaMessage(Bin, 0, 0,
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   id(undefined, TrUserData),
					   TrUserData).

dfp_read_field_def_AddEncomendaMessage(<<10,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       TrUserData) ->
    d_field_AddEncomendaMessage_importer_name(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      TrUserData);
dfp_read_field_def_AddEncomendaMessage(<<18,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       TrUserData) ->
    d_field_AddEncomendaMessage_manufacturer(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5,
					     TrUserData);
dfp_read_field_def_AddEncomendaMessage(<<26,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       TrUserData) ->
    d_field_AddEncomendaMessage_product(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_AddEncomendaMessage(<<32,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       TrUserData) ->
    d_field_AddEncomendaMessage_quantity(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_AddEncomendaMessage(<<40,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				       TrUserData) ->
    d_field_AddEncomendaMessage_willing_price(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      TrUserData);
dfp_read_field_def_AddEncomendaMessage(<<>>, 0, 0, F@_1,
				       F@_2, F@_3, F@_4, F@_5, _) ->
    #'AddEncomendaMessage'{importer_name = F@_1,
			   manufacturer = F@_2, product = F@_3, quantity = F@_4,
			   willing_price = F@_5};
dfp_read_field_def_AddEncomendaMessage(Other, Z1, Z2,
				       F@_1, F@_2, F@_3, F@_4, F@_5,
				       TrUserData) ->
    dg_read_field_def_AddEncomendaMessage(Other, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData).

dg_read_field_def_AddEncomendaMessage(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AddEncomendaMessage(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  F@_5, TrUserData);
dg_read_field_def_AddEncomendaMessage(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AddEncomendaMessage_importer_name(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, TrUserData);
      18 ->
	  d_field_AddEncomendaMessage_manufacturer(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   TrUserData);
      26 ->
	  d_field_AddEncomendaMessage_product(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5,
					      TrUserData);
      32 ->
	  d_field_AddEncomendaMessage_quantity(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, F@_5,
					       TrUserData);
      40 ->
	  d_field_AddEncomendaMessage_willing_price(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AddEncomendaMessage(Rest, 0, 0, F@_1, F@_2,
						F@_3, F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_AddEncomendaMessage(Rest, 0, 0, F@_1, F@_2,
					    F@_3, F@_4, F@_5, TrUserData);
	    2 ->
		skip_length_delimited_AddEncomendaMessage(Rest, 0, 0,
							  F@_1, F@_2, F@_3,
							  F@_4, F@_5,
							  TrUserData);
	    3 ->
		skip_group_AddEncomendaMessage(Rest, Key bsr 3, 0, F@_1,
					       F@_2, F@_3, F@_4, F@_5,
					       TrUserData);
	    5 ->
		skip_32_AddEncomendaMessage(Rest, 0, 0, F@_1, F@_2,
					    F@_3, F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_AddEncomendaMessage(<<>>, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, F@_5, _) ->
    #'AddEncomendaMessage'{importer_name = F@_1,
			   manufacturer = F@_2, product = F@_3, quantity = F@_4,
			   willing_price = F@_5}.

d_field_AddEncomendaMessage_importer_name(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData)
    when N < 57 ->
    d_field_AddEncomendaMessage_importer_name(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, TrUserData);
d_field_AddEncomendaMessage_importer_name(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, _, F@_2, F@_3, F@_4, F@_5,
					  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AddEncomendaMessage(RestF, 0, 0,
					   NewFValue, F@_2, F@_3, F@_4, F@_5,
					   TrUserData).

d_field_AddEncomendaMessage_manufacturer(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData)
    when N < 57 ->
    d_field_AddEncomendaMessage_manufacturer(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, TrUserData);
d_field_AddEncomendaMessage_manufacturer(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, _, F@_3, F@_4, F@_5,
					 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AddEncomendaMessage(RestF, 0, 0,
					   F@_1, NewFValue, F@_3, F@_4, F@_5,
					   TrUserData).

d_field_AddEncomendaMessage_product(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData)
    when N < 57 ->
    d_field_AddEncomendaMessage_product(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, TrUserData);
d_field_AddEncomendaMessage_product(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, _, F@_4, F@_5,
				    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AddEncomendaMessage(RestF, 0, 0,
					   F@_1, F@_2, NewFValue, F@_4, F@_5,
					   TrUserData).

d_field_AddEncomendaMessage_quantity(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData)
    when N < 57 ->
    d_field_AddEncomendaMessage_quantity(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, TrUserData);
d_field_AddEncomendaMessage_quantity(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, _, F@_5,
				     TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_AddEncomendaMessage(RestF, 0, 0,
					   F@_1, F@_2, F@_3, NewFValue, F@_5,
					   TrUserData).

d_field_AddEncomendaMessage_willing_price(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData)
    when N < 57 ->
    d_field_AddEncomendaMessage_willing_price(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, TrUserData);
d_field_AddEncomendaMessage_willing_price(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, _,
					  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_AddEncomendaMessage(RestF, 0, 0,
					   F@_1, F@_2, F@_3, F@_4, NewFValue,
					   TrUserData).

skip_varint_AddEncomendaMessage(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData) ->
    skip_varint_AddEncomendaMessage(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_AddEncomendaMessage(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				TrUserData) ->
    dfp_read_field_def_AddEncomendaMessage(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData).

skip_length_delimited_AddEncomendaMessage(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData)
    when N < 57 ->
    skip_length_delimited_AddEncomendaMessage(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, TrUserData);
skip_length_delimited_AddEncomendaMessage(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AddEncomendaMessage(Rest2, 0, 0,
					   F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData).

skip_group_AddEncomendaMessage(Bin, FNum, Z2, F@_1,
			       F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AddEncomendaMessage(Rest, 0, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData).

skip_32_AddEncomendaMessage(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_AddEncomendaMessage(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData).

skip_64_AddEncomendaMessage(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_AddEncomendaMessage(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData).

decode_msg_AuthenticationRequest(Bin, TrUserData) ->
    dfp_read_field_def_AuthenticationRequest(Bin, 0, 0,
					     id(undefined, TrUserData),
					     id(undefined, TrUserData),
					     id(undefined, TrUserData),
					     id(undefined, TrUserData),
					     id(undefined, TrUserData),
					     TrUserData).

dfp_read_field_def_AuthenticationRequest(<<8,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData) ->
    d_field_AuthenticationRequest_authType(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData);
dfp_read_field_def_AuthenticationRequest(<<16,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData) ->
    d_field_AuthenticationRequest_clientType(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5,
					     TrUserData);
dfp_read_field_def_AuthenticationRequest(<<24,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData) ->
    d_field_AuthenticationRequest_area(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_AuthenticationRequest(<<34,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData) ->
    d_field_AuthenticationRequest_username(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData);
dfp_read_field_def_AuthenticationRequest(<<42,
					   Rest/binary>>,
					 Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData) ->
    d_field_AuthenticationRequest_password(Rest, Z1, Z2,
					   F@_1, F@_2, F@_3, F@_4, F@_5,
					   TrUserData);
dfp_read_field_def_AuthenticationRequest(<<>>, 0, 0,
					 F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    #'AuthenticationRequest'{authType = F@_1,
			     clientType = F@_2, area = F@_3, username = F@_4,
			     password = F@_5};
dfp_read_field_def_AuthenticationRequest(Other, Z1, Z2,
					 F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData) ->
    dg_read_field_def_AuthenticationRequest(Other, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, F@_5,
					    TrUserData).

dg_read_field_def_AuthenticationRequest(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AuthenticationRequest(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, F@_5, TrUserData);
dg_read_field_def_AuthenticationRequest(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_AuthenticationRequest_authType(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, F@_5,
						 TrUserData);
      16 ->
	  d_field_AuthenticationRequest_clientType(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   TrUserData);
      24 ->
	  d_field_AuthenticationRequest_area(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5,
					     TrUserData);
      34 ->
	  d_field_AuthenticationRequest_username(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, F@_5,
						 TrUserData);
      42 ->
	  d_field_AuthenticationRequest_password(Rest, 0, 0, F@_1,
						 F@_2, F@_3, F@_4, F@_5,
						 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AuthenticationRequest(Rest, 0, 0, F@_1,
						  F@_2, F@_3, F@_4, F@_5,
						  TrUserData);
	    1 ->
		skip_64_AuthenticationRequest(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, F@_5, TrUserData);
	    2 ->
		skip_length_delimited_AuthenticationRequest(Rest, 0, 0,
							    F@_1, F@_2, F@_3,
							    F@_4, F@_5,
							    TrUserData);
	    3 ->
		skip_group_AuthenticationRequest(Rest, Key bsr 3, 0,
						 F@_1, F@_2, F@_3, F@_4, F@_5,
						 TrUserData);
	    5 ->
		skip_32_AuthenticationRequest(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_AuthenticationRequest(<<>>, 0, 0,
					F@_1, F@_2, F@_3, F@_4, F@_5, _) ->
    #'AuthenticationRequest'{authType = F@_1,
			     clientType = F@_2, area = F@_3, username = F@_4,
			     password = F@_5}.

d_field_AuthenticationRequest_authType(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       TrUserData)
    when N < 57 ->
    d_field_AuthenticationRequest_authType(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, TrUserData);
d_field_AuthenticationRequest_authType(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, _, F@_2, F@_3, F@_4, F@_5,
				       TrUserData) ->
    {NewFValue, RestF} =
	{id(d_enum_AuthenticationRequestType(begin
					       <<Res:32/signed-native>> = <<(X
									       bsl
									       N
									       +
									       Acc):32/unsigned-native>>,
					       id(Res, TrUserData)
					     end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_AuthenticationRequest(RestF, 0, 0,
					     NewFValue, F@_2, F@_3, F@_4, F@_5,
					     TrUserData).

d_field_AuthenticationRequest_clientType(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData)
    when N < 57 ->
    d_field_AuthenticationRequest_clientType(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, TrUserData);
d_field_AuthenticationRequest_clientType(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, _, F@_3, F@_4, F@_5,
					 TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_ClientType(begin
						 <<Res:32/signed-native>> = <<(X
										 bsl
										 N
										 +
										 Acc):32/unsigned-native>>,
						 id(Res, TrUserData)
					       end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_AuthenticationRequest(RestF, 0, 0,
					     F@_1, NewFValue, F@_3, F@_4, F@_5,
					     TrUserData).

d_field_AuthenticationRequest_area(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData)
    when N < 57 ->
    d_field_AuthenticationRequest_area(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, TrUserData);
d_field_AuthenticationRequest_area(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, _, F@_4, F@_5,
				   TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_Area(begin
					   <<Res:32/signed-native>> = <<(X bsl N
									   +
									   Acc):32/unsigned-native>>,
					   id(Res, TrUserData)
					 end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_AuthenticationRequest(RestF, 0, 0,
					     F@_1, F@_2, NewFValue, F@_4, F@_5,
					     TrUserData).

d_field_AuthenticationRequest_username(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       TrUserData)
    when N < 57 ->
    d_field_AuthenticationRequest_username(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, TrUserData);
d_field_AuthenticationRequest_username(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, _, F@_5,
				       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthenticationRequest(RestF, 0, 0,
					     F@_1, F@_2, F@_3, NewFValue, F@_5,
					     TrUserData).

d_field_AuthenticationRequest_password(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				       TrUserData)
    when N < 57 ->
    d_field_AuthenticationRequest_password(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2, F@_3,
					   F@_4, F@_5, TrUserData);
d_field_AuthenticationRequest_password(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, F@_3, F@_4, _,
				       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AuthenticationRequest(RestF, 0, 0,
					     F@_1, F@_2, F@_3, F@_4, NewFValue,
					     TrUserData).

skip_varint_AuthenticationRequest(<<1:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    skip_varint_AuthenticationRequest(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, TrUserData);
skip_varint_AuthenticationRequest(<<0:1, _:7,
				    Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				  TrUserData) ->
    dfp_read_field_def_AuthenticationRequest(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5,
					     TrUserData).

skip_length_delimited_AuthenticationRequest(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, TrUserData)
    when N < 57 ->
    skip_length_delimited_AuthenticationRequest(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						F@_4, F@_5, TrUserData);
skip_length_delimited_AuthenticationRequest(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3, F@_4,
					    F@_5, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AuthenticationRequest(Rest2, 0, 0,
					     F@_1, F@_2, F@_3, F@_4, F@_5,
					     TrUserData).

skip_group_AuthenticationRequest(Bin, FNum, Z2, F@_1,
				 F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AuthenticationRequest(Rest, 0, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5,
					     TrUserData).

skip_32_AuthenticationRequest(<<_:32, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_AuthenticationRequest(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5,
					     TrUserData).

skip_64_AuthenticationRequest(<<_:64, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_AuthenticationRequest(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5,
					     TrUserData).

'd_enum_GenericMessage.MessageType'(1) -> 'ADD_ARTIGO';
'd_enum_GenericMessage.MessageType'(2) ->
    'ADD_ENCOMENDA';
'd_enum_GenericMessage.MessageType'(3) ->
    'AUTH_REQUEST';
'd_enum_GenericMessage.MessageType'(V) -> V.

d_enum_ClientType(1) -> 'IMPORTER';
d_enum_ClientType(2) -> 'MANUFACTURER';
d_enum_ClientType(V) -> V.

d_enum_AuthenticationRequestType(1) -> 'REGISTER';
d_enum_AuthenticationRequestType(2) -> 'LOGIN';
d_enum_AuthenticationRequestType(V) -> V.

d_enum_Area(1) -> 'TECNOLOGIA';
d_enum_Area(2) -> 'ALIMENTACAO';
d_enum_Area(3) -> 'TEXTEIS';
d_enum_Area(4) -> 'DIVERSOS';
d_enum_Area(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'GenericMessage' ->
	  merge_msg_GenericMessage(Prev, New, TrUserData);
      'AddArtigoMessage' ->
	  merge_msg_AddArtigoMessage(Prev, New, TrUserData);
      'AddEncomendaMessage' ->
	  merge_msg_AddEncomendaMessage(Prev, New, TrUserData);
      'AuthenticationRequest' ->
	  merge_msg_AuthenticationRequest(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_GenericMessage/3}).
merge_msg_GenericMessage(#'GenericMessage'{payload =
					       PFpayload},
			 #'GenericMessage'{type = NFtype, payload = NFpayload},
			 TrUserData) ->
    #'GenericMessage'{type = NFtype,
		      payload =
			  case {PFpayload, NFpayload} of
			    {{artigo, OPFpayload}, {artigo, ONFpayload}} ->
				{artigo,
				 merge_msg_AddArtigoMessage(OPFpayload,
							    ONFpayload,
							    TrUserData)};
			    {{encomenda, OPFpayload},
			     {encomenda, ONFpayload}} ->
				{encomenda,
				 merge_msg_AddEncomendaMessage(OPFpayload,
							       ONFpayload,
							       TrUserData)};
			    {{auth_request, OPFpayload},
			     {auth_request, ONFpayload}} ->
				{auth_request,
				 merge_msg_AuthenticationRequest(OPFpayload,
								 ONFpayload,
								 TrUserData)};
			    {_, undefined} -> PFpayload;
			    _ -> NFpayload
			  end}.

-compile({nowarn_unused_function,merge_msg_AddArtigoMessage/3}).
merge_msg_AddArtigoMessage(#'AddArtigoMessage'{},
			   #'AddArtigoMessage'{manufacturer_name =
						   NFmanufacturer_name,
					       product_name = NFproduct_name,
					       minimum_quantity =
						   NFminimum_quantity,
					       maximum_quantity =
						   NFmaximum_quantity,
					       unitary_price = NFunitary_price,
					       negotiation_time =
						   NFnegotiation_time},
			   _) ->
    #'AddArtigoMessage'{manufacturer_name =
			    NFmanufacturer_name,
			product_name = NFproduct_name,
			minimum_quantity = NFminimum_quantity,
			maximum_quantity = NFmaximum_quantity,
			unitary_price = NFunitary_price,
			negotiation_time = NFnegotiation_time}.

-compile({nowarn_unused_function,merge_msg_AddEncomendaMessage/3}).
merge_msg_AddEncomendaMessage(#'AddEncomendaMessage'{},
			      #'AddEncomendaMessage'{importer_name =
							 NFimporter_name,
						     manufacturer =
							 NFmanufacturer,
						     product = NFproduct,
						     quantity = NFquantity,
						     willing_price =
							 NFwilling_price},
			      _) ->
    #'AddEncomendaMessage'{importer_name = NFimporter_name,
			   manufacturer = NFmanufacturer, product = NFproduct,
			   quantity = NFquantity,
			   willing_price = NFwilling_price}.

-compile({nowarn_unused_function,merge_msg_AuthenticationRequest/3}).
merge_msg_AuthenticationRequest(#'AuthenticationRequest'{},
				#'AuthenticationRequest'{authType = NFauthType,
							 clientType =
							     NFclientType,
							 area = NFarea,
							 username = NFusername,
							 password = NFpassword},
				_) ->
    #'AuthenticationRequest'{authType = NFauthType,
			     clientType = NFclientType, area = NFarea,
			     username = NFusername, password = NFpassword}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'GenericMessage' ->
	  v_msg_GenericMessage(Msg, [MsgName], TrUserData);
      'AddArtigoMessage' ->
	  v_msg_AddArtigoMessage(Msg, [MsgName], TrUserData);
      'AddEncomendaMessage' ->
	  v_msg_AddEncomendaMessage(Msg, [MsgName], TrUserData);
      'AuthenticationRequest' ->
	  v_msg_AuthenticationRequest(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_GenericMessage/3}).
-dialyzer({nowarn_function,v_msg_GenericMessage/3}).
v_msg_GenericMessage(#'GenericMessage'{type = F1,
				       payload = F2},
		     Path, TrUserData) ->
    'v_enum_GenericMessage.MessageType'(F1, [type | Path],
					TrUserData),
    case F2 of
      undefined -> ok;
      {artigo, OF2} ->
	  v_msg_AddArtigoMessage(OF2, [artigo, payload | Path],
				 TrUserData);
      {encomenda, OF2} ->
	  v_msg_AddEncomendaMessage(OF2,
				    [encomenda, payload | Path], TrUserData);
      {auth_request, OF2} ->
	  v_msg_AuthenticationRequest(OF2,
				      [auth_request, payload | Path],
				      TrUserData);
      _ -> mk_type_error(invalid_oneof, F2, [payload | Path])
    end,
    ok;
v_msg_GenericMessage(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'GenericMessage'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_AddArtigoMessage/3}).
-dialyzer({nowarn_function,v_msg_AddArtigoMessage/3}).
v_msg_AddArtigoMessage(#'AddArtigoMessage'{manufacturer_name
					       = F1,
					   product_name = F2,
					   minimum_quantity = F3,
					   maximum_quantity = F4,
					   unitary_price = F5,
					   negotiation_time = F6},
		       Path, TrUserData) ->
    v_type_string(F1, [manufacturer_name | Path],
		  TrUserData),
    v_type_string(F2, [product_name | Path], TrUserData),
    v_type_int32(F3, [minimum_quantity | Path], TrUserData),
    v_type_int32(F4, [maximum_quantity | Path], TrUserData),
    v_type_int32(F5, [unitary_price | Path], TrUserData),
    v_type_int32(F6, [negotiation_time | Path], TrUserData),
    ok;
v_msg_AddArtigoMessage(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AddArtigoMessage'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_AddEncomendaMessage/3}).
-dialyzer({nowarn_function,v_msg_AddEncomendaMessage/3}).
v_msg_AddEncomendaMessage(#'AddEncomendaMessage'{importer_name
						     = F1,
						 manufacturer = F2,
						 product = F3, quantity = F4,
						 willing_price = F5},
			  Path, TrUserData) ->
    v_type_string(F1, [importer_name | Path], TrUserData),
    v_type_string(F2, [manufacturer | Path], TrUserData),
    v_type_string(F3, [product | Path], TrUserData),
    v_type_int32(F4, [quantity | Path], TrUserData),
    v_type_int32(F5, [willing_price | Path], TrUserData),
    ok;
v_msg_AddEncomendaMessage(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AddEncomendaMessage'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_AuthenticationRequest/3}).
-dialyzer({nowarn_function,v_msg_AuthenticationRequest/3}).
v_msg_AuthenticationRequest(#'AuthenticationRequest'{authType
							 = F1,
						     clientType = F2, area = F3,
						     username = F4,
						     password = F5},
			    Path, TrUserData) ->
    v_enum_AuthenticationRequestType(F1, [authType | Path],
				     TrUserData),
    v_enum_ClientType(F2, [clientType | Path], TrUserData),
    v_enum_Area(F3, [area | Path], TrUserData),
    v_type_string(F4, [username | Path], TrUserData),
    v_type_string(F5, [password | Path], TrUserData),
    ok;
v_msg_AuthenticationRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AuthenticationRequest'},
		  X, Path).

-compile({nowarn_unused_function,'v_enum_GenericMessage.MessageType'/3}).
-dialyzer({nowarn_function,'v_enum_GenericMessage.MessageType'/3}).
'v_enum_GenericMessage.MessageType'('ADD_ARTIGO', _Path,
				    _TrUserData) ->
    ok;
'v_enum_GenericMessage.MessageType'('ADD_ENCOMENDA',
				    _Path, _TrUserData) ->
    ok;
'v_enum_GenericMessage.MessageType'('AUTH_REQUEST',
				    _Path, _TrUserData) ->
    ok;
'v_enum_GenericMessage.MessageType'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_GenericMessage.MessageType'(X, Path,
				    _TrUserData) ->
    mk_type_error({invalid_enum,
		   'GenericMessage.MessageType'},
		  X, Path).

-compile({nowarn_unused_function,v_enum_ClientType/3}).
-dialyzer({nowarn_function,v_enum_ClientType/3}).
v_enum_ClientType('IMPORTER', _Path, _TrUserData) -> ok;
v_enum_ClientType('MANUFACTURER', _Path, _TrUserData) ->
    ok;
v_enum_ClientType(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
v_enum_ClientType(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'ClientType'}, X, Path).

-compile({nowarn_unused_function,v_enum_AuthenticationRequestType/3}).
-dialyzer({nowarn_function,v_enum_AuthenticationRequestType/3}).
v_enum_AuthenticationRequestType('REGISTER', _Path,
				 _TrUserData) ->
    ok;
v_enum_AuthenticationRequestType('LOGIN', _Path,
				 _TrUserData) ->
    ok;
v_enum_AuthenticationRequestType(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
v_enum_AuthenticationRequestType(X, Path,
				 _TrUserData) ->
    mk_type_error({invalid_enum,
		   'AuthenticationRequestType'},
		  X, Path).

-compile({nowarn_unused_function,v_enum_Area/3}).
-dialyzer({nowarn_function,v_enum_Area/3}).
v_enum_Area('TECNOLOGIA', _Path, _TrUserData) -> ok;
v_enum_Area('ALIMENTACAO', _Path, _TrUserData) -> ok;
v_enum_Area('TEXTEIS', _Path, _TrUserData) -> ok;
v_enum_Area('DIVERSOS', _Path, _TrUserData) -> ok;
v_enum_Area(V, Path, TrUserData) when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
v_enum_Area(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'Area'}, X, Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{enum, 'GenericMessage.MessageType'},
      [{'ADD_ARTIGO', 1}, {'ADD_ENCOMENDA', 2},
       {'AUTH_REQUEST', 3}]},
     {{enum, 'ClientType'},
      [{'IMPORTER', 1}, {'MANUFACTURER', 2}]},
     {{enum, 'AuthenticationRequestType'},
      [{'REGISTER', 1}, {'LOGIN', 2}]},
     {{enum, 'Area'},
      [{'TECNOLOGIA', 1}, {'ALIMENTACAO', 2}, {'TEXTEIS', 3},
       {'DIVERSOS', 4}]},
     {{msg, 'GenericMessage'},
      [#field{name = type, fnum = 1, rnum = 2,
	      type = {enum, 'GenericMessage.MessageType'},
	      occurrence = required, opts = []},
       #gpb_oneof{name = payload, rnum = 3,
		  fields =
		      [#field{name = artigo, fnum = 2, rnum = 3,
			      type = {msg, 'AddArtigoMessage'},
			      occurrence = optional, opts = []},
		       #field{name = encomenda, fnum = 3, rnum = 3,
			      type = {msg, 'AddEncomendaMessage'},
			      occurrence = optional, opts = []},
		       #field{name = auth_request, fnum = 4, rnum = 3,
			      type = {msg, 'AuthenticationRequest'},
			      occurrence = optional, opts = []}]}]},
     {{msg, 'AddArtigoMessage'},
      [#field{name = manufacturer_name, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = product_name, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = minimum_quantity, fnum = 3, rnum = 4,
	      type = int32, occurrence = required, opts = []},
       #field{name = maximum_quantity, fnum = 4, rnum = 5,
	      type = int32, occurrence = required, opts = []},
       #field{name = unitary_price, fnum = 5, rnum = 6,
	      type = int32, occurrence = required, opts = []},
       #field{name = negotiation_time, fnum = 6, rnum = 7,
	      type = int32, occurrence = required, opts = []}]},
     {{msg, 'AddEncomendaMessage'},
      [#field{name = importer_name, fnum = 1, rnum = 2,
	      type = string, occurrence = required, opts = []},
       #field{name = manufacturer, fnum = 2, rnum = 3,
	      type = string, occurrence = required, opts = []},
       #field{name = product, fnum = 3, rnum = 4,
	      type = string, occurrence = required, opts = []},
       #field{name = quantity, fnum = 4, rnum = 5,
	      type = int32, occurrence = required, opts = []},
       #field{name = willing_price, fnum = 5, rnum = 6,
	      type = int32, occurrence = required, opts = []}]},
     {{msg, 'AuthenticationRequest'},
      [#field{name = authType, fnum = 1, rnum = 2,
	      type = {enum, 'AuthenticationRequestType'},
	      occurrence = required, opts = []},
       #field{name = clientType, fnum = 2, rnum = 3,
	      type = {enum, 'ClientType'}, occurrence = required,
	      opts = []},
       #field{name = area, fnum = 3, rnum = 4,
	      type = {enum, 'Area'}, occurrence = required,
	      opts = []},
       #field{name = username, fnum = 4, rnum = 5,
	      type = string, occurrence = required, opts = []},
       #field{name = password, fnum = 5, rnum = 6,
	      type = string, occurrence = required, opts = []}]}].


get_msg_names() ->
    ['GenericMessage', 'AddArtigoMessage',
     'AddEncomendaMessage', 'AuthenticationRequest'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['GenericMessage', 'AddArtigoMessage',
     'AddEncomendaMessage', 'AuthenticationRequest'].


get_enum_names() ->
    ['GenericMessage.MessageType', 'ClientType',
     'AuthenticationRequestType', 'Area'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('GenericMessage') ->
    [#field{name = type, fnum = 1, rnum = 2,
	    type = {enum, 'GenericMessage.MessageType'},
	    occurrence = required, opts = []},
     #gpb_oneof{name = payload, rnum = 3,
		fields =
		    [#field{name = artigo, fnum = 2, rnum = 3,
			    type = {msg, 'AddArtigoMessage'},
			    occurrence = optional, opts = []},
		     #field{name = encomenda, fnum = 3, rnum = 3,
			    type = {msg, 'AddEncomendaMessage'},
			    occurrence = optional, opts = []},
		     #field{name = auth_request, fnum = 4, rnum = 3,
			    type = {msg, 'AuthenticationRequest'},
			    occurrence = optional, opts = []}]}];
find_msg_def('AddArtigoMessage') ->
    [#field{name = manufacturer_name, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = product_name, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = minimum_quantity, fnum = 3, rnum = 4,
	    type = int32, occurrence = required, opts = []},
     #field{name = maximum_quantity, fnum = 4, rnum = 5,
	    type = int32, occurrence = required, opts = []},
     #field{name = unitary_price, fnum = 5, rnum = 6,
	    type = int32, occurrence = required, opts = []},
     #field{name = negotiation_time, fnum = 6, rnum = 7,
	    type = int32, occurrence = required, opts = []}];
find_msg_def('AddEncomendaMessage') ->
    [#field{name = importer_name, fnum = 1, rnum = 2,
	    type = string, occurrence = required, opts = []},
     #field{name = manufacturer, fnum = 2, rnum = 3,
	    type = string, occurrence = required, opts = []},
     #field{name = product, fnum = 3, rnum = 4,
	    type = string, occurrence = required, opts = []},
     #field{name = quantity, fnum = 4, rnum = 5,
	    type = int32, occurrence = required, opts = []},
     #field{name = willing_price, fnum = 5, rnum = 6,
	    type = int32, occurrence = required, opts = []}];
find_msg_def('AuthenticationRequest') ->
    [#field{name = authType, fnum = 1, rnum = 2,
	    type = {enum, 'AuthenticationRequestType'},
	    occurrence = required, opts = []},
     #field{name = clientType, fnum = 2, rnum = 3,
	    type = {enum, 'ClientType'}, occurrence = required,
	    opts = []},
     #field{name = area, fnum = 3, rnum = 4,
	    type = {enum, 'Area'}, occurrence = required,
	    opts = []},
     #field{name = username, fnum = 4, rnum = 5,
	    type = string, occurrence = required, opts = []},
     #field{name = password, fnum = 5, rnum = 6,
	    type = string, occurrence = required, opts = []}];
find_msg_def(_) -> error.


find_enum_def('GenericMessage.MessageType') ->
    [{'ADD_ARTIGO', 1}, {'ADD_ENCOMENDA', 2},
     {'AUTH_REQUEST', 3}];
find_enum_def('ClientType') ->
    [{'IMPORTER', 1}, {'MANUFACTURER', 2}];
find_enum_def('AuthenticationRequestType') ->
    [{'REGISTER', 1}, {'LOGIN', 2}];
find_enum_def('Area') ->
    [{'TECNOLOGIA', 1}, {'ALIMENTACAO', 2}, {'TEXTEIS', 3},
     {'DIVERSOS', 4}];
find_enum_def(_) -> error.


enum_symbol_by_value('GenericMessage.MessageType',
		     Value) ->
    'enum_symbol_by_value_GenericMessage.MessageType'(Value);
enum_symbol_by_value('ClientType', Value) ->
    enum_symbol_by_value_ClientType(Value);
enum_symbol_by_value('AuthenticationRequestType',
		     Value) ->
    enum_symbol_by_value_AuthenticationRequestType(Value);
enum_symbol_by_value('Area', Value) ->
    enum_symbol_by_value_Area(Value).


enum_value_by_symbol('GenericMessage.MessageType',
		     Sym) ->
    'enum_value_by_symbol_GenericMessage.MessageType'(Sym);
enum_value_by_symbol('ClientType', Sym) ->
    enum_value_by_symbol_ClientType(Sym);
enum_value_by_symbol('AuthenticationRequestType',
		     Sym) ->
    enum_value_by_symbol_AuthenticationRequestType(Sym);
enum_value_by_symbol('Area', Sym) ->
    enum_value_by_symbol_Area(Sym).


'enum_symbol_by_value_GenericMessage.MessageType'(1) ->
    'ADD_ARTIGO';
'enum_symbol_by_value_GenericMessage.MessageType'(2) ->
    'ADD_ENCOMENDA';
'enum_symbol_by_value_GenericMessage.MessageType'(3) ->
    'AUTH_REQUEST'.


'enum_value_by_symbol_GenericMessage.MessageType'('ADD_ARTIGO') ->
    1;
'enum_value_by_symbol_GenericMessage.MessageType'('ADD_ENCOMENDA') ->
    2;
'enum_value_by_symbol_GenericMessage.MessageType'('AUTH_REQUEST') ->
    3.

enum_symbol_by_value_ClientType(1) -> 'IMPORTER';
enum_symbol_by_value_ClientType(2) -> 'MANUFACTURER'.


enum_value_by_symbol_ClientType('IMPORTER') -> 1;
enum_value_by_symbol_ClientType('MANUFACTURER') -> 2.

enum_symbol_by_value_AuthenticationRequestType(1) ->
    'REGISTER';
enum_symbol_by_value_AuthenticationRequestType(2) ->
    'LOGIN'.


enum_value_by_symbol_AuthenticationRequestType('REGISTER') ->
    1;
enum_value_by_symbol_AuthenticationRequestType('LOGIN') ->
    2.

enum_symbol_by_value_Area(1) -> 'TECNOLOGIA';
enum_symbol_by_value_Area(2) -> 'ALIMENTACAO';
enum_symbol_by_value_Area(3) -> 'TEXTEIS';
enum_symbol_by_value_Area(4) -> 'DIVERSOS'.


enum_value_by_symbol_Area('TECNOLOGIA') -> 1;
enum_value_by_symbol_Area('ALIMENTACAO') -> 2;
enum_value_by_symbol_Area('TEXTEIS') -> 3;
enum_value_by_symbol_Area('DIVERSOS') -> 4.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"GenericMessage">>) -> 'GenericMessage';
fqbin_to_msg_name(<<"AddArtigoMessage">>) -> 'AddArtigoMessage';
fqbin_to_msg_name(<<"AddEncomendaMessage">>) -> 'AddEncomendaMessage';
fqbin_to_msg_name(<<"AuthenticationRequest">>) -> 'AuthenticationRequest';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('GenericMessage') -> <<"GenericMessage">>;
msg_name_to_fqbin('AddArtigoMessage') -> <<"AddArtigoMessage">>;
msg_name_to_fqbin('AddEncomendaMessage') -> <<"AddEncomendaMessage">>;
msg_name_to_fqbin('AuthenticationRequest') -> <<"AuthenticationRequest">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"GenericMessage.MessageType">>) ->
    'GenericMessage.MessageType';
fqbin_to_enum_name(<<"ClientType">>) -> 'ClientType';
fqbin_to_enum_name(<<"AuthenticationRequestType">>) ->
    'AuthenticationRequestType';
fqbin_to_enum_name(<<"Area">>) -> 'Area';
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('GenericMessage.MessageType') ->
    <<"GenericMessage.MessageType">>;
enum_name_to_fqbin('ClientType') -> <<"ClientType">>;
enum_name_to_fqbin('AuthenticationRequestType') ->
    <<"AuthenticationRequestType">>;
enum_name_to_fqbin('Area') -> <<"Area">>;
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> undefined.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "message.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["message.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["message"].


get_msg_containment("message") ->
    ['AddArtigoMessage', 'AddEncomendaMessage',
     'AuthenticationRequest', 'GenericMessage'];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("message") -> undefined;
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("message") -> [];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("message") -> [];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("message") ->
    ['Area', 'AuthenticationRequestType', 'ClientType',
     'GenericMessage.MessageType'];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"AuthenticationRequest">>) -> "message";
get_proto_by_msg_name_as_fqbin(<<"GenericMessage">>) -> "message";
get_proto_by_msg_name_as_fqbin(<<"AddEncomendaMessage">>) -> "message";
get_proto_by_msg_name_as_fqbin(<<"AddArtigoMessage">>) -> "message";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"Area">>) -> "message";
get_proto_by_enum_name_as_fqbin(<<"GenericMessage.MessageType">>) -> "message";
get_proto_by_enum_name_as_fqbin(<<"ClientType">>) -> "message";
get_proto_by_enum_name_as_fqbin(<<"AuthenticationRequestType">>) -> "message";
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.11.0".

gpb_version_as_list() ->
    [4,11,0].
